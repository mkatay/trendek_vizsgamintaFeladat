class TestSuite {
    constructor() {
        this.msgArr = [];
        this.ol = document.createElement('ol');
        document.querySelector('body').appendChild(document.createElement('hr'))
        document.querySelector('body').appendChild(this.ol);
    }

    assert(condition, message) {
        const resultMessage = condition
            ? 'sikeresen lefutott üöÄ.'
            : `${message} ü´£`;
        this.msgArr.push(resultMessage);
    }

    showResults() {
        this.msgArr.forEach((msg, i) => {
            const li = document.createElement('li');
            li.textContent = `${i + 1}. teszt: ${msg}`;
            this.ol.appendChild(li);
        });
    }

    runTests() {
        this.runHeaderTest();
        this.runTitleTest();
        this.runUListTest();
        this.runGridLayoutTest();
        this.runParagraphTest();
        this.runSubtitleTest();
        this.runFooterTest();
        this.showResults();
    }

    runHeaderTest() {
        const header = document.querySelector('header');
        this.assert(header.classList.contains('justify-content-center'), 'Nincs meg a v√≠zszintes k√∂z√©preigaz√≠t√°sa a c√≠msornak!');
        this.assert(header.classList.contains('align-items-center'), 'Nincs meg a f√ºgg≈ëleges k√∂z√©preigaz√≠t√°sa a c√≠msornak!');
        const headerStyle=window.getComputedStyle(header)    
        let path=headerStyle.backgroundImage.match(/url\(['"]?([^'"]+)['"]?\)/)
        path=path ? path[1].split('/').slice(-2) : []
        this.assert(path[0]=='img' && path[1]=='banner.jpg','Nincs be√°ll√≠tva a h√°tt√©rk√©p!')
        this.assert(headerStyle.backgroundSize=='cover','Nem megfelel≈ëen van igaz√≠tva a header tag h√°tt√©rk√©pe!')
       
    }
    runTitleTest() {
        const h1 = document.querySelector('h1');
        const h1Style=window.getComputedStyle(h1)
        this.assert(h1Style.color=='rgb(255, 255, 255)','A f≈ëc√≠m bet≈±sz√≠ne nem megfelel≈ë!')
        this.assert(h1Style.fontSize=='64px','A f≈ëc√≠m bet≈±m√©rete nem megfelel≈ë!')
        this.assert(h1Style.fontWeight=='750','A f≈ëc√≠m bet≈±vastags√°ga nem megfelel≈ë!')
        this.assert(h1Style.letterSpacing=='16px','A f≈ëc√≠m bet≈±ritk√≠t√°sa nem megfelel≈ë!')
        this.assert(h1Style.paddingBottom=='3px','A f≈ëc√≠m bels≈ë marg√≥ja nem megfelel≈ë!')
        this.assert(h1Style.borderBottom=='4.8px dotted rgb(255, 255, 255)','A f≈ëc√≠m als√≥ szeg√©lye nem megfelel≈ë!')
    }

    runUListTest() {
        const p = document.querySelector('.felsorolas');
        const ul=p.nextElementSibling?.tagName
        this.assert(ul=='UL','Nem lett l√©trehozva az ul tag a megfelel≈ë helyen!')
        const liList=document.querySelectorAll('ul li')
        this.assert(liList?.length==7,'Nem lett l√©trehozva a megfelel≈ë sz√°m√∫ (7) lista elem!')
        const liStyle=liList?.length>0 ? window.getComputedStyle(liList[0]) : null
        this.assert(liStyle?.listStyleType=='square','Nem megfelel≈ëek a listaelemek felsorol√°s jelei!')
    }

    runGridLayoutTest() {
        const cols = document.querySelectorAll('.trend');
        Array.from(cols).forEach((obj,i)=>{
            this.assert(obj.classList.contains('col-md-6'),`A/az ${i+1}. trend oszt√°lyjel√∂l≈ëvel ell√°tott t√°rol√≥ nem megfelel≈ëen van form√°zva!`)
        })
     }

    runParagraphTest() {
        const paragraph = document.querySelector('p');
        const pStyle=window.getComputedStyle(paragraph)
        this.assert(pStyle.textAlign=='justify','Az √∂sszes bekezd√©s nem  sorkiz√°rt!')
        this.assert(pStyle.textIndent=='15px','Az √∂sszes bekezd√©snek nincs meg a k√©rt els≈ë sor beh√∫z√°sa!')
    }

    runSubtitleTest(){
        const subTitle=document.querySelector('h2')
        const subTitleStyle=window.getComputedStyle(subTitle)
        this.assert(subTitleStyle.color=='rgb(19, 76, 253)','Nem megfelel≈ë sz√≠n≈± az √∂sszes alc√≠m bet≈±sz√≠ne!')
        this.assert(subTitleStyle.textAlign=='center','Nem minden alc√≠m van k√∂z√©pre igaz√≠tva!')
        this.assert(subTitleStyle.borderBottom=='2.4px dotted rgb(19, 76, 253)','Nem minden alc√≠m als√≥ szeg√©lye van megfelel≈ëen be√°ll√≠tva!')
        this.assert(subTitleStyle.margin=='16px','Az √∂sszes alc√≠mnek nincs megfelel≈ëen √°ll√≠tva a k√ºls≈ë marg√≥ja!')
    } 
    runFooterTest(){
        const link=document.querySelector('footer a')
        this.assert(link?.nodeName == 'A', 'A footer belsej√©ben nincs anchor tag l√©trehozva!');
        this.assert(link?.textContent=='Forr√°s:Forbes','Az link sz√∂vege nem megfelel≈ë!')
        this.assert(link?.target=='_blank','Az link nem √∫j b√∂ng√©sz≈ëablakban ny√≠lik meg!')
    }
}
const testSuite = new TestSuite();
testSuite.runTests();
